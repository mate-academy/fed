#!/usr/bin/env node

"use strict";function t(t){return t&&"object"==typeof t&&"default"in t?t.default:t}var i=require("commander"),n=t(require("fs-extra")),o=t(require("path")),s=require("child_process"),e=t(require("fs"));const r="@mate-academy/scripts";var c="0.0.27";class a{constructor(t){this.rootDir=t}}function m(t,i=!0){let n={stdio:"ignore"};i&&(n={stdio:"inherit"}),s.execSync(t,n)}function d(t,i=!0){try{m(t,i)}catch(t){process.exit(1)}}let l=(()=>{class t extends a{async run(){this.copyConfigs(),await this.initBackstop(),this.initGitHooks()}copyConfigs(){this.copyCommonConfigs(),this.copyLayoutConfigs(),this.copyLinthtmlConfig()}copyCommonConfigs(){const t=o.join(__dirname,"../configs"),i=o.join(t,"common");n.copySync(i,this.rootDir)}copyLayoutConfigs(){const t=o.join(__dirname,"../configs"),i=o.join(t,"layout");n.copySync(i,this.rootDir)}copyLinthtmlConfig(){n.copyFileSync(o.join(this.rootDir,t.packagesPaths.linthtml,t.configFileNames.linthtml),o.join(this.rootDir,t.configFileNames.linthtml))}async initBackstop(){const t=o.join(this.rootDir,"backstop_data"),i=o.join(t,"bitmaps_reference");n.removeSync(i),m("backstop reference --config="+o.join(this.rootDir,"./backstopConfig.js"))}initGitHooks(){const t=o.join(__dirname,"../configs"),i=o.join(t,"git-hooks"),s=o.join(this.rootDir,"./.git/hooks");n.readdirSync(i).forEach(t=>{const e=o.join(s,t);n.copySync(o.join(i,t),e),m("chmod +x "+e)})}}return t.packagesPaths={linthtml:"node_modules/@mate-academy/linthtml-config"},t.configFileNames={linthtml:".linthtmlrc.json"},t})();class p extends a{async run(t){const{html:i,styles:n,javascript:o}=t;i&&this.lintHtml(),n&&this.lintStyles(),o&&this.lintJs()}lintHtml(){d("linthtml "+o.join(this.rootDir,"src/**/*.html"))}lintStyles(){d("stylelint "+o.join(this.rootDir,"src/**/*.*css"))}lintJs(){d("eslint "+o.join(this.rootDir,"src/**/*.js"))}}class h extends a{async run(){n.removeSync(o.join(this.rootDir,"dist")),s.execSync("gulp build",{stdio:"inherit"})}}let u=(()=>{class t extends a{async run(){n.copySync(o.join(this.rootDir,"./backstop_data/html_report"),o.join(this.rootDir,"./dist/report/html_report")),s.execSync(`git add ${o.join(this.rootDir,"./dist")} -f`,{stdio:"inherit"}),s.execSync('git commit -m "make build" --no-verify',{stdio:"inherit"});try{s.execSync("git push --delete origin gh-pages")}catch(t){}s.execSync("git subtree push --prefix dist origin gh-pages",{stdio:"inherit"}),s.execSync("git reset --soft HEAD^",{stdio:"inherit"}),n.removeSync(o.join(this.rootDir,"dist"))}}return t.requiredCommands=[h],t})();const y=new Map;y.set(p,t=>{const{styles:i,html:n,javascript:o}=t;return i&&n&&o?{styles:i,html:n,javascript:o}:{styles:!0,html:!0,javascript:!0}});function g(t){return t.includes("package.json")}function f(t){if("test"===process.env.NODE_ENV)return!0;let i;try{const n=e.readFileSync(o.join(t,"package.json"),{encoding:"utf-8"});i=JSON.parse(n)}catch(t){i=null}return i&&i.devDependencies&&i.devDependencies["@mate-academy/scripts"]}function j(t){return"/"===t}const k=new i.Command,D=new class{constructor(){this.commands=new Map}get rootDir(){return this._rootDir||(this._rootDir=function(){let t=process.cwd(),i=e.readdirSync(t);for(;!g(i)||!f(t);){if(j(t))throw new Error("Command should be run inside project folder with @mate-academy/scripts as devDependency");t=o.join(t,"../"),i=e.readdirSync(t)}return t}()),this._rootDir}make(t){return i=>this.runCommand(t,i)}async runCommand(t,i){const n=this.getCommand(t);if(t.requiredCommands)for(let i of t.requiredCommands)await this.runCommand(i);const o=y.get(t);return o&&i?n.run(o(i)):n.run()}getCommand(t){return this.commands.get(t)||this.makeCommand(t)}makeCommand(t){const i=new t(this.rootDir);return this.commands.set(t,i),i}};k.name("mate-scripts").version(c,"-v --version","output current version"),k.command("init").description("init linters and configs").action(D.make(l)),k.command("start").description("run development server").action(D.make(class extends a{async run(){s.spawn("gulp",{stdio:"inherit"})}})),k.command("lint").option("-s, --styles","lint styles only",!1).option("-h, --html","lint html only",!1).option("-j, --javascript","lint javascript only",!1).description("lint html, css and js files").action(D.make(p)),k.command("test").description("run tests").action(D.make(class extends a{async run(){n.removeSync(o.join(this.rootDir,"./backstop_data/bitmaps_test")),d("backstop test --config=backstopConfig.js")}})),k.command("build").description("create production ready build").action(D.make(h)),k.command("deploy").description("deploy application to gh-pages").action(D.make(u)),k.command("update").description("update @mate-academy/scripts").action(D.make(class extends a{async run(t){m(`npm install -D ${r}@latest`),m("npm run init")}})),k.parse(process.argv);
