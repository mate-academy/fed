#!/usr/bin/env node

"use strict";function t(t){return t&&"object"==typeof t&&"default"in t?t.default:t}var i=require("commander"),e=require("child_process"),s=t(require("fs")),o=t(require("path")),n=t(require("fs-extra"));const r="@mate-academy/scripts";var c="0.0.38";function a(t,i=!0){let s={stdio:"ignore"};i&&(s={stdio:"inherit"}),e.execSync(t,s)}function l(t,i=!0){try{a(t,i)}catch(t){process.exit(1)}}function h(t){return t.includes("package.json")}function p(t){if("test"===process.env.NODE_ENV)return!0;let i;try{const e=s.readFileSync(o.join(t,"package.json"),{encoding:"utf-8"});i=JSON.parse(e)}catch(t){i=null}return i&&i.devDependencies&&i.devDependencies["@mate-academy/scripts"]}function m(t){return"/"===t}var u,d,y,f,g,j;!function(t){t.None="none",t.Layout="layout",t.Javascript="javascript",t.React="react",t.ReactTypescript="reactTypescript"}(u||(u={}));class D{constructor(t){this.projectType=u.None,this.throwNoImplementationError=()=>{throw new Error(`No implementation for command ${this.constructor.name} for ${this.projectType} project`)},this[d]=this.throwNoImplementationError,this[y]=this.throwNoImplementationError,this[f]=this.throwNoImplementationError,this[g]=this.throwNoImplementationError,this[j]=this.throwNoImplementationError,this.rootDir=t}async run(t){this.setProjectType(),await this.common(t),await this[this.projectType](t)}setProjectType(){if(this.projectType!==u.None)return;const{mateAcademy:t}=JSON.parse(n.readFileSync(o.join(this.rootDir,"package.json"),{encoding:"utf-8"}));t&&t.projectType||D.throwProjectTypeError(),this.projectType=t.projectType}static throwProjectTypeError(){throw new Error('package.json should contain\n{\n  ...\n  "mateAcademy": {\n    "projectType": "layout" | "javascript" | "react" | "reactTypescript"\n  }\n}\n')}child(t){return new t(this.rootDir)}}d=u.None,y=u.Layout,f=u.Javascript,g=u.React,j=u.ReactTypescript;class k{constructor(t){return this.rootDir=t,this.configPath=o.join(this.rootDir,"./backstopConfig.js"),this.dataDir=o.join(this.rootDir,"backstop_data"),this.referencesDir=o.join(this.dataDir,"bitmaps_reference"),this.testResultsDir=o.join(this.dataDir,"bitmaps_test"),this.htmlReportDir=o.join(this.dataDir,"html_report"),k.__instance||(k.__instance=this),k.__instance}test(){this.ensureReferences(),this.cleanTestResults(),k.run("test",{config:this.configPath})}ensureReferences(){this.areReferencesExists()||this.loadReferences()}areReferencesExists(){return n.existsSync(this.referencesDir)}cleanTestResults(){n.removeSync(this.testResultsDir)}loadReferences(){this.cleanReference(),k.run("reference",{config:this.configPath})}cleanReference(){n.removeSync(this.referencesDir)}static run(t,i){l(`backstop ${t} ${Object.entries(i).reduce((t,[i,e])=>`${t} --${i}=${e}`,"")}`)}}class v{constructor(t){return this.rootDir=t,v.__instance||(v.__instance=this),v.__instance}build(t="dist"){a("gulp build --destination "+t)}serve(t="dist"){a("gulp --destination "+t)}}let w=(()=>{class t extends D{constructor(){super(...arguments),this.gitHooksDestinationDir=o.join(this.rootDir,"./.git/hooks"),this.backstop=new k(this.rootDir),this.layout=()=>{this.copyLayoutConfigs(),this.copyLinthtmlConfig(),this.backstop.loadReferences()}}common(){this.copyCommonConfigs(),this.initGitHooks()}copyCommonConfigs(){const i=o.join(t.configsDir,"common");n.copySync(i,this.rootDir)}copyLayoutConfigs(){const i=o.join(t.configsDir,"layout");n.copySync(i,this.rootDir)}copyLinthtmlConfig(){const i=o.join(this.rootDir,t.lintHtmlConfigDir,t.lintHtmlConfigFileName),e=o.join(this.rootDir,t.lintHtmlConfigFileName);n.copyFileSync(i,e)}initGitHooks(){n.readdirSync(t.gitHooksSourceDir).forEach(t=>this.initGitHook(t))}initGitHook(i){const e=o.join(t.gitHooksSourceDir,i),s=o.join(this.gitHooksDestinationDir,i);n.copySync(e,s),t.makeGitHookExecutable(s)}static makeGitHookExecutable(t){a("chmod +x "+t)}}return t.lintHtmlConfigDir="node_modules/@mate-academy/linthtml-config",t.lintHtmlConfigFileName=".linthtmlrc.json",t.configsDir=o.join(__dirname,"../configs"),t.gitHooksSourceDir=o.join(t.configsDir,"git-hooks"),t})();class b extends D{constructor(){super(...arguments),this.layout=t=>{const{html:i,files:e}=t;i&&b.lintHtml(e)}}common(t){const{styles:i,javascript:e,files:s}=t;i&&b.lintStyles(s),e&&b.lintJs(s)}static lintHtml(t){l("linthtml "+(t?t.join(" "):"./src/**/*.html"))}static lintStyles(t){l("stylelint "+(t?t.join(" "):"./src/**/*.css ./src/**/*.scss"))}static lintJs(t){l("eslint "+(t?t.join(" "):"./src"))}}class S extends D{constructor(){super(...arguments),this.gulp=new v(this.rootDir),this.layout=()=>{this.gulp.build("dist")}}common(){}}class _ extends D{constructor(){super(...arguments),this.buildCommand=this.child(S),this.destinationDir=o.join(this.rootDir,"dist"),this.backstop=new k(this.rootDir),this.layout=async()=>{await this.buildCommand.run(),console.log("Start deploy to gh-pages\n");try{this.copyHtmlReport(),this.commitBuild(),_.ensureCanPush(),_.pushGhPagesSubtree(),console.log("Deployed to gh-pages successfully\n")}catch(t){console.log("Error during deploy to gh-pages:"),console.error(t.message)}finally{this.clean()}}}common(){}copyHtmlReport(){n.copySync(o.join(this.backstop.htmlReportDir),o.join(this.destinationDir,"./report/html_report"))}commitBuild(){a(`git add ${this.destinationDir} -f`,!1),a('git commit -m "make build" --no-verify',!1)}static ensureCanPush(){!function(t,i=!0){try{a(t,i)}catch(t){}}("git push --delete origin gh-pages",!1)}static pushGhPagesSubtree(){a("git subtree push --prefix dist origin gh-pages",!1)}clean(){a("git reset --soft HEAD^",!1),a("git restore --staged "+this.destinationDir,!1),n.removeSync(this.destinationDir)}}const H=new i.Command,R=new class{constructor(){this.rootDir=function(){let t=process.cwd(),i=s.readdirSync(t);for(;!h(i)||!p(t);){if(m(t))throw new Error("Command should be run inside project folder with @mate-academy/scripts as devDependency");t=o.join(t,"../"),i=s.readdirSync(t)}return t}()}make(t,i){const e=new t(this.rootDir);return i?(...t)=>{const s=t.pop(),o=i(s,...t);return e.run(o)}:()=>e.run()}};H.name("mate-scripts").version(c,"-v --version","output current version"),H.command("init").description("init linters and configs").action(R.make(w)),H.command("start").description("run development server").action(R.make(class extends D{constructor(){super(...arguments),this.gulp=new v(this.rootDir),this.layout=()=>{this.gulp.serve("dist")}}common(){}})),H.command("lint [files...]").option("-s, --styles","lint styles only",!1).option("-h, --html","lint html only",!1).option("-j, --javascript","lint javascript only",!1).description("lint html, css and js files").action(R.make(b,(t,i)=>{const{styles:e,html:s,javascript:o}=t,n=i&&i.length?i:null;return e||s||o?{styles:e,html:s,javascript:o,files:n}:{styles:!0,html:!0,javascript:!0,files:n}})),H.command("test").description("run tests").action(R.make(class extends D{constructor(){super(...arguments),this.backstop=new k(this.rootDir),this.layout=()=>{this.backstop.test()}}common(){}})),H.command("build").description("create production ready build").action(R.make(S)),H.command("deploy").description("deploy application to gh-pages").action(R.make(_)),H.command("update").description("update @mate-academy/scripts").action(R.make(class extends D{constructor(){super(...arguments),this.layout=()=>{},this.javascript=()=>{},this.react=()=>{},this.reactTypescript=()=>{}}common(){a(`npm install -D ${r}@latest`),a("npm run init")}})),H.parse(process.argv);
